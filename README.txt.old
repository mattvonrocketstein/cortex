
Cortex is a playground for experiments in distributed computing, AI, and language design,
inspired by the concept of "agent oriented programming".

Before you get started:
-----------------------
    # Required by pip to recognize bzr VCS
    $ sudo apt-get install bzr

    # Required by python-nmap, which is used by the network-mapper agent
    $ sudo apt-get install nmap

    # Required to make images representing lines of communication for agents,
    $ sudo apt-get install pygraphviz pygraphviz-dev

    # Required potentially by many things
    $ sudo apt-get install python-dev

Installing:
------------

    # Build a virtual environment and activate it:
    $ virtualenv foo --no-site-packages
    $ cd foo; source bin/activate

    # Clone cortex
    $ git clone git://github.com/mattvonrocketstein/cortex.git

    # Install requirements:
    $ ./bin/pip install -r cortex/requirements.txt

    # Install cortex
    ./bin/python setup.py develop

    # If everything ok, this should succeed:
    $ ./bin/python -c"import cortex"

Running tests:
--------------
    # activate the venv you made in the other step
    $ cd foo; source bin/activate

    # Now you can choose one of:
    $ python cortex/lib/cortex/tests      # from directory with cortex src clone
    $ python -m "cortex.tests.__main__"   # from pre-installed source
    $ cortex --test --gtk --services=gui  # runs tests in terminal, launches gtk shell

Looking around:
---------------
  One of the services cortex provides offers a system shell.  Typing "go" inside
  your activated virtualenv will invoke it.  After the output from the bootup
  procedure, you'll be dropped into something that looks more or less like a normal
  ipython shell, but the prompt says something like:

       Universe(<ID>)[:<port>]<hostname> [1]

  This terminal is just part of wider "universe", where the universe is everything
  inside this cortex node.  In particular the terminal is a service, of which there
  are many.  Try typing "universe.services":

      ServiceManager(['api', 'terminal', 'postoffice', 'mapper', 'linda'])

  You already met the terminal-service.  Briefly the purposes of the rest of these are:

     1) The "postoffice" routes messages within the universe.

     2) The "mapper" actively seeks out other cortex instances and can be configured to
        look on the same machine, or on whatever networks the universe is made aware of.

     3) The "api" service exists to specify communication policies for most things external
        to the universe-- this includes other nodes but cortex boot-scripts and other things
        may find it useful as well.

     4) The "linda" service is a tuple-space abstraction; it is backed by the lindypy module.


  Have you noticed by now red-text occasionally appearing after your cortex-shell
  prompt?  If so, then you have already discovered the event bus.  The terminal
  service consumes messages from this, and any other agent or service may write to
  it.  As mentioned earlier, the postoffice is responsible for routing these messages.
  A typical message might look like this:

      Events: [(<PostOffice-Service 38814096>,),
               ("Registered Peer:   addr = 127.0.0.1 ...)
               .... ]

  The first part there is just the messenger that last handled the message, the body
  says that a peer has been registered.  Scrutinizing the message further we would find
  that the message originated with the Mapper service, and that it also contains a
  dictionary with lots of details about the scan it has finished.  The terminal isn't
  the only system component that has noticed a peer-registration event.  Try typing
  "peers" and interacting with the peer manager:

     PeerManager(['localhost:1337', 'localhost:1338'])

References and other fun reads:
-------------------------------
modularity and programming in-the-large: http://portal.acm.org/citation.cfm?id=808431
traits as an alternative to multiple inheritance: http://scg.unibe.ch/research/traits/
ai/logic/probability in python http://www.ainewsletter.com/newsletters/aix_0508.htm#python_ai

Code being evaluated for toolbox:
---------------------------------
 + logilab -- switch to this for CSP instead the AIMA code?
 + pyke    -- python meets prolog, great for dealing with the "knapsack problem"
 + python-snakes -- petri nets using arbitrary python objects as tokens
 + baker 1.1 -- easier command line scripts (perfect for cli version ofsudo  cortex.core.api)
 + xanalogica.tumblers -- transfinite addressing scheme (evaluating for usage as cortex URI backend)
   see also: http://pypi.python.org/pypi/DescribedRoutes/0.2.2
 + cogen -- coroutine flavored concurrency to complement threads/multiprocessing/reactor models
 + py.test and pylib --  rapid testing and development utils.
 + enthought contexts --  can fire events from inside normal functions on assignment, deletion, etc
 + strait -- traits for python (perfect abstraction for componentizing behaviours)
 + python-graph or networkx for working with graphs/trees?
 + good examples of ast hacks for sugar:
     http://pypi.python.org/pypi/pseudosugar/2010.01.01.READMEn
     see also: pseudomethods
 + combinatorics/munkres "assignment problem" http://pypi.python.org/pypi/munkres/1.0.5.4
 + pypi intellect
