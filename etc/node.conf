#
# Basic node.conf for driving cortex
#
#   + The formatting for this file is essentially json + simple comments
#
#   + A word about service load-order.  You should know that the order specified
#     by this file may not be preserved.  Services may not be booted in the same order
#     every time, even given the same nodeconf.  This is feature.  Services will be booted
#     in the first consistent boot-order than is computed as a solution to the
#     boot-order CSP (constraint satisfaction problem). The boot-order CSP is implicitly
#     defined by the decorators for the services <start> methods.  Here's an example, taken
#     from the network_mapper service:
#
#       @constraint(boot_first='postoffice')
#       @constraint(boot_first='api')
#       def start(self):
#          do_stuff()

# a lightweight event bus
["load_service", "postoffice"]

# network mapper / peer-discovery with nmap
["load_service", "network_mapper"]

# exposes the api by way of json-rpc
["load_service", "api"]

# beep-beep daemon set to use the postoffice
#["load_service", "beacon", {"mode":"postoffice"}]

# linda implementation via lindypy
["load_service", "_linda"]

# ipython terminal for peering into cortex runtime
["load_service", "terminal"]

# dbus/avahi peer discovery (obsolete)
#["load_service", "autodiscovery"]
